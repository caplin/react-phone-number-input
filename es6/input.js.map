{"version":3,"sources":["../source/input.js"],"names":["React","Component","PropTypes","ReactDOM","as_you_type","parse","format","ReactInput","classNames","Select","country_names","International_icon","all_countries","default_dictionary","International","item","code","name","push","toUpperCase","Input","props","countries","value","dictionary","international","internationalIcon","flags","country","should_add_international_option","state","country_code","correct_initial_value_if_neccessary","select_options","label","from_dictionary","icon","undefined","get_country_option_icon","metadata","convertToNational","parsed","phone","text","slice","onCountryChange","setState","length","new_props","indexOf","set_country","saveOnIcons","showCountrySelect","flagsPath","nativeExpanded","disabled","selectTabIndex","inputTabIndex","style","className","input_props","country_select_is_shown","markup","can_change_country","select","ref","country_select_toggled","on_country_select_tab_out","select_style","input","on_change","on_key_down","input_style","propTypes","string","onChange","func","isRequired","onBlur","onKeyDown","bool","objectOf","arrayOf","oneOfType","element","number","object","showAllCountriesOnFocus","shape","defaultProps","focus","previous_country_code","set_country_code_value","national_number","parse_partial_number","setTimeout","character","could_phone_number_belong_to_country","formatter","template","findDOMNode","event","keyCode","toggle","changed_country","e164","is_shown","preventDefault","partial_national_number","display","verticalAlign","toLowerCase","properties","key","phone_number","phone_number_digits","country_phone_code_to_countries","country_phone_code","possible_country_phone_code","substring"],"mappings":"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","file":"input.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport ReactDOM from 'react-dom'\nimport { as_you_type, parse, format } from 'libphonenumber-js'\nimport { ReactInput } from 'input-format'\nimport classNames from 'classnames'\n\n// Not importing here directly from `react-responsive-ui` npm package\n// just to reduce the overall bundle size.\nimport { Select } from './react-responsive-ui'\n\nimport country_names from './country names.json'\nimport International_icon from './international icon'\n\n// A list of all country codes\nconst all_countries = []\n\n// Country code to country name map\nconst default_dictionary =\n{\n\tInternational: 'International'\n}\n\n// Populate `all_countries` and `default_dictionary`\nfor (const item of country_names)\n{\n\tconst [code, name] = item\n\n\tall_countries.push(code.toUpperCase())\n\tdefault_dictionary[code.toUpperCase()] = name\n}\n\n// Allows passing custom `libphonenumber-js` metadata\n// to reduce the overall bundle size.\nexport default class Input extends Component\n{\n\tstatic propTypes =\n\t{\n\t\t// Phone number `value`.\n\t\t// Is a plaintext international phone number\n\t\t// (e.g. \"+12223333333\" for USA)\n\t\tvalue : PropTypes.string,\n\n\t\t// This handler is called each time\n\t\t// the phone number <input/> changes its textual value.\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets a parsed `value` in its `onBlur` handler,\n\t\t// not the formatted one.\n\t\t// (`redux-form` passed `onBlur` to this component\n\t\t//  and this component intercepts that `onBlur`\n\t\t//  to make sure it works correctly with `redux-form`)\n\t\tonBlur : PropTypes.func,\n\n\t\t// Set `onKeyDown` handler.\n\t\t// Can be used in special cases to handle e.g. enter pressed\n\t\tonKeyDown : PropTypes.func,\n\n\t\t// Disables both the <input/> and the <select/>\n\t\t// (is `false` by default)\n\t\tdisabled : PropTypes.bool.isRequired,\n\n\t\t// Two-letter country code\n\t\t// to be used as the default country\n\t\t// for local (non-international) phone numbers.\n\t\tcountry : PropTypes.string,\n\n\t\t// Is called when the selected country changes\n\t\t// (either by a user manually, or by autoparsing\n\t\t//  an international phone number being input).\n\t\t// This handler does not need to update the `country` property.\n\t\t// It's simply a listener for those who might need that for whatever purpose.\n\t\tonCountryChange : PropTypes.func,\n\n\t\t// Localization dictionary:\n\t\t// `{ International: 'Международный', RU: 'Россия', US: 'США', ... }`\n\t\tdictionary : PropTypes.objectOf(PropTypes.string),\n\n\t\t// An optional list of allowed countries\n\t\tcountries : PropTypes.arrayOf(PropTypes.string).isRequired,\n\n\t\t// Custom national flag icons\n\t\tflags : PropTypes.oneOfType\n\t\t([\n\t\t\tPropTypes.objectOf(React.PropTypes.element),\n\t\t\tPropTypes.bool\n\t\t]),\n\n\t\t// A base URL path for national flag SVG icons.\n\t\t// By default it uses the ones from `flag-icon-css` github repo.\n\t\tflagsPath : PropTypes.string.isRequired,\n\n\t\t// Whether to use native `<select/>` when expanded\n\t\tnativeExpanded : PropTypes.bool.isRequired,\n\n\t\t// If set to `false`, then country flags will be shown\n\t\t// for all countries in the options list\n\t\t// (not just for selected country).\n\t\tsaveOnIcons : PropTypes.bool.isRequired,\n\n\t\t// Whether to show country `<Select/>`\n\t\t// (is `true` by default)\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\n\n\t\t// Whether to add the \"International\" option\n\t\t// to the list of countries.\n\t\tinternational : PropTypes.bool,\n\n\t\t// Custom \"International\" phone number type icon.\n\t\tinternationalIcon : PropTypes.element.isRequired,\n\n\t\t// Should the initially passed phone number `value`\n\t\t// be converted to a national phone number for its country.\n\t\t// (is `true` by default)\n\t\tconvertToNational : PropTypes.bool.isRequired,\n\n\t\t// HTML `tabindex` attribute for the country select\n\t\tselectTabIndex    : PropTypes.number,\n\n\t\t// HTML `tabindex` attribute for the phone number input\n\t\tinputTabIndex     : PropTypes.number,\n\n\t\t// CSS style object\n\t\tstyle : PropTypes.object,\n\n\t\t// Should all countries be shown when clicking on the flag icon?\n\t\tshowAllCountriesOnFocus : PropTypes.bool,\n\n\t\t// CSS class\n\t\tclassName : PropTypes.string,\n\n\t\t// `libphonenumber-js` metadata\n\t\tmetadata : PropTypes.shape\n\t\t({\n\t\t\tcountries : PropTypes.object.isRequired\n\t\t})\n\t\t.isRequired\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\t// Is enabled\n\t\tdisabled: false,\n\n\t\t// Include all countries by default\n\t\tcountries: all_countries,\n\n\t\t// By default use the ones from `flag-icon-css` github repo.\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t\t// Default international icon (globe)\n\t\tinternationalIcon: <div className=\"react-phone-number-input__icon react-phone-number-input__icon--international\"><International_icon/></div>,\n\n\t\t// Custom country names\n\t\tdictionary: {},\n\n\t\t// Whether to use native `<select/>` when expanded\n\t\tnativeExpanded: false,\n\n\t\t// Don't show flags for all countries in the options list\n\t\t// (show it just for selected country).\n\t\t// (to save user's traffic because all flags are about 3 MegaBytes)\n\t\tsaveOnIcons: true,\n\n\t\t// Show country `<Select/>` by default\n\t\tshowCountrySelect: true,\n\n\t\t// Convert the initially passed phone number `value`\n\t\t// to a national phone number for its country.\n\t\tconvertToNational: true,\n\n\t\tshowAllCountriesOnFocus: false\n\t}\n\n\tstate = {}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props)\n\n\t\tconst\n\t\t{\n\t\t\tcountries,\n\t\t\tvalue,\n\t\t\tdictionary,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tflags\n\t\t}\n\t\t= props\n\n\t\tlet { country } = props\n\n\t\t// Autodetect country if value is set\n\t\t// and is international (which it should be)\n\t\tif (!country && value && value[0] === '+')\n\t\t{\n\t\t\t// Will be left `undefined` in case of non-detection\n\t\t\tcountry = parse(value).country\n\t\t}\n\n\t\t// If there will be no \"International\" option\n\t\t// then a `country` must be selected.\n\t\tif (!should_add_international_option(props) && !country)\n\t\t{\n\t\t\tcountry = countries[0]\n\t\t}\n\n\t\t// Set the currently selected country\n\t\tthis.state.country_code = country\n\n\t\t// If a phone number `value` is passed then format it\n\t\tif (value)\n\t\t{\n\t\t\t// Set the currently entered `value`\n\t\t\tthis.state.value = this.correct_initial_value_if_neccessary(value, country)\n\t\t}\n\n\t\t// `<Select/>` options\n\t\tthis.select_options = []\n\n\t\t// Add the \"International\" option to the country list (if suitable)\n\t\tif (should_add_international_option(props))\n\t\t{\n\t\t\tthis.select_options.push\n\t\t\t({\n\t\t\t\tlabel : from_dictionary('International', props),\n\t\t\t\ticon  : flags === false ? undefined : internationalIcon\n\t\t\t})\n\t\t}\n\n\t\t// Add a `<Select/>` option for each country\n\t\tfor (const country_code of countries)\n\t\t{\n\t\t\tthis.select_options.push\n\t\t\t({\n\t\t\t\tvalue : country_code,\n\t\t\t\tlabel : from_dictionary(country_code, props),\n\t\t\t\ticon  : get_country_option_icon(country_code, props)\n\t\t\t})\n\t\t}\n\t}\n\n\t// If the country code is specified\n\t//   If the value has a leading plus sign\n\t//     If it converts into a valid national number for this country\n\t//       Then the value is set to be that national number\n\t//     Else\n\t//       The leading + sign is trimmed\n\t//   Else\n\t//     The value stays as it is\n\t// Else\n\t//   If the value has a leading + sign\n\t//     The value stays as it is\n\t//   Else\n\t//     The + sign is prepended\n\t//\n\tcorrect_initial_value_if_neccessary(value, country_code)\n\t{\n\t\tconst { metadata, convertToNational } = this.props\n\n\t\tif (!value)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\t// If the country code is specified\n\t\tif (country_code)\n\t\t{\n\t\t\t// If the value has a leading plus sign\n\t\t\tif (value[0] === '+' && convertToNational)\n\t\t\t{\n\t\t\t\t// If it's a fully-entered phone number\n\t\t\t\t// that converts into a valid national number for this country\n\t\t\t\t// then the value is set to be that national number.\n\n\t\t\t\tconst parsed = parse(value, metadata)\n\n\t\t\t\tif (parsed.country === country_code)\n\t\t\t\t{\n\t\t\t\t\treturn this.format(parsed.phone, country_code).text\n\t\t\t\t}\n\n\t\t\t\t// Else the leading + sign is trimmed.\n\t\t\t\treturn value.slice(1)\n\t\t\t}\n\n\t\t\t// Else the value stays as it is\n\t\t\treturn value\n\t\t}\n\n\t\t// The country is not set.\n\t\t// Assuming that's an international phone number.\n\n\t\t// If the value has a leading + sign\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\t// The value is correct\n\t\t\treturn value\n\t\t}\n\n\t\t// The + sign is prepended\n\t\treturn '+' + value\n\t}\n\n\tset_country_code_value(country_code)\n\t{\n\t\tconst { onCountryChange } = this.props\n\n\t\tif (onCountryChange)\n\t\t{\n\t\t\tonCountryChange(country_code)\n\t\t}\n\n\t\tthis.setState({ country_code })\n\t}\n\n\t// `<select/>` `onChange` handler\n\tset_country = (country_code, focus) =>\n\t{\n\t\tconst { metadata } = this.props\n\n\t\t// Previously selected country\n\t\tconst previous_country_code = this.state.country_code\n\n\t\tthis.set_country_code_value(country_code)\n\n\t\t// Adjust the phone number (`value`)\n\t\t// according to the selected `country_code`\n\n\t\tlet { value } = this.state\n\n\t\t// If switching to a country from International\n\t\t//   If the international number belongs to this country\n\t\t//     Convert it to a national number\n\t\t//   Else\n\t\t//     Trim the leading + sign\n\t\t//\n\t\t// If switching to a country from a country\n\t\t//   If the value has a leading + sign\n\t\t//     If the international number belongs to this country\n\t\t//       Convert it to a national number\n\t\t//     Else\n\t\t//       Trim the leading + sign\n\t\t//   Else\n\t\t//     The value stays as it is\n\t\t//\n\t\t// If switching to International from a country\n\t\t//   If the value has a leading + sign\n\t\t//     The value stays as it is\n\t\t//   Else\n\t\t//     Take the international plaintext value\n\n\t\tif (value)\n\t\t{\n\t\t\t// If switching to a country from International\n\t\t\tif (!previous_country_code && country_code)\n\t\t\t{\n\t\t\t\t// The value is international plaintext\n\t\t\t\tconst parsed = parse(value, metadata)\n\n\t\t\t\t// If it's for this country,\n\t\t\t\t// then convert it to a national number\n\t\t\t\tif (parsed.country === country_code)\n\t\t\t\t{\n\t\t\t\t\tvalue = this.format(parsed.phone, country_code).text\n\t\t\t\t}\n\t\t\t\t// Else just trim the + sign\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvalue = value.slice(1)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (previous_country_code && country_code)\n\t\t\t{\n\t\t\t\tif (value[0] === '+')\n\t\t\t\t{\n\t\t\t\t\tconst parsed = parse(value, metadata)\n\n\t\t\t\t\tif (parsed.country === country_code)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = this.format(parsed.phone, country_code).text\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = value.slice(1)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If switching to International from a country\n\t\t\tif (previous_country_code && !country_code)\n\t\t\t{\n\t\t\t\t// If no leading + sign\n\t\t\t\tif (value[0] !== '+')\n\t\t\t\t{\n\t\t\t\t\t// Take the international plaintext value\n\t\t\t\t\tconst national_number = parse_partial_number(value, previous_country_code, metadata).national_number\n\t\t\t\t\tvalue = format(national_number, previous_country_code, 'International_plaintext', metadata)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update the adjusted `value`\n\t\t\t// and update `this.props.value` (in e.164 phone number format)\n\t\t\t// according to the new `this.state.value`.\n\t\t\t// (keep them in sync)\n\t\t\tthis.on_change(value, country_code, true)\n\t\t}\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\tif (focus !== false)\n\t\t{\n\t\t\tsetTimeout(this.focus, 0)\n\t\t}\n\t}\n\n\t// `input-format` `parse` character function\n\t// https://github.com/halt-hammerzeit/input-format\n\tparse = (character, value) =>\n\t{\n\t\tconst { countries } = this.props\n\n\t\tif (character === '+')\n\t\t{\n\t\t\t// Only allow a leading `+`\n\t\t\tif (!value)\n\t\t\t{\n\t\t\t\t// If the \"International\" option is available\n\t\t\t\t// then allow the leading `+` because it's meant to be this way.\n\t\t\t\t//\n\t\t\t\t// Otherwise, the leading `+` will either erase all subsequent digits\n\t\t\t\t// (if they're not appropriate for the selected country)\n\t\t\t\t// or the subsequent digits (if any) will join the `+`\n\t\t\t\t// forming an international phone number. Because a user\n\t\t\t\t// might be comfortable with entering an international phone number\n\t\t\t\t// (i.e. with country code) rather than the local one.\n\t\t\t\t// Therefore such possibility is given.\n\t\t\t\t//\n\t\t\t\treturn character\n\t\t\t}\n\t\t}\n\t\t// For digits\n\t\telse if (character >= '0' && character <= '9')\n\t\t{\n\t\t\tconst { metadata } = this.props\n\t\t\tconst { country_code } = this.state\n\n\t\t\t// If the \"International\" option is not available\n\t\t\t// and if the value has a leading `+`\n\t\t\t// then it means that the phone number being entered\n\t\t\t// is an international one, so only allow the country phone code\n\t\t\t// for the selected country to be entered.\n\n\t\t\tif (!should_add_international_option(this.props) && value && value[0] === '+')\n\t\t\t{\n\t\t\t\tif (!could_phone_number_belong_to_country(value + character, country_code, metadata))\n\t\t\t\t{\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\treturn character\n\t\t\t}\n\n\t\t\treturn character\n\t\t}\n\t}\n\n\t// `input-format` `format` function\n\t// https://github.com/halt-hammerzeit/input-format\n\tformat = (value, country_code = this.state.country_code) =>\n\t{\n\t\tconst { metadata } = this.props\n\n\t\t// `value` is already parsed input, i.e.\n\t\t// either International plaintext phone number\n\t\t// or just local phone number digits.\n\n\t\t// \"As you type\" formatter\n\t\tconst formatter = new as_you_type(country_code, metadata)\n\n\t\t// Is used to check if a country code can already be derived\n\t\tthis.formatter = formatter\n\n\t\t// Format phone number\n\t\tconst text = formatter.input(value)\n\n\t\treturn { text, template: formatter.template }\n\t}\n\n\t// Can be called externally\n\tfocus = () =>\n\t{\n\t\tReactDOM.findDOMNode(this.input).focus()\n\t}\n\n\t// `<input/>` `onKeyDown` handler\n\ton_key_down = (event) =>\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\t// Expand country `<select/>`` on \"Down arrow\" key press\n\t\tif (event.keyCode === 40)\n\t\t{\n\t\t\tthis.select.toggle()\n\t\t}\n\n\t\tif (onKeyDown)\n\t\t{\n\t\t\tonKeyDown(event)\n\t\t}\n\t}\n\n\t// `<input/>` `onChange` handler.\n\t// Updates `this.props.value` (in e.164 phone number format)\n\t// according to the new `this.state.value`.\n\t// (keeps them in sync)\n\ton_change = (value, country_code = this.state.country_code, changed_country = false) =>\n\t{\n\t\tconst { metadata, onChange } = this.props\n\n\t\t// If the `<input/>` is empty then just exit\n\t\tif (!value)\n\t\t{\n\t\t\tthis.setState({ value })\n\t\t\treturn onChange(value)\n\t\t}\n\n\t\t// For international phone number\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\t// If an international phone number is being erased up to the first `+` sign\n\t\t\t// or if an international phone number is just starting (with a `+` sign)\n\t\t\t// then unset the current country because it's clear that a user intends to change it.\n\t\t\tif (value.length === 1)\n\t\t\t{\n\t\t\t\tcountry_code = undefined\n\t\t\t\tthis.set_country_code_value(country_code)\n\t\t\t}\n\t\t\t// If a phone number is being input as an international one\n\t\t\t// and the country code can already be derived,\n\t\t\t// then switch the country.\n\t\t\t// (`001` is a special \"non-geograpical entity\" code in `libphonenumber` library)\n\t\t\telse if (!changed_country && this.formatter.country && this.formatter.country !== '001')\n\t\t\t{\n\t\t\t\tcountry_code = this.formatter.country\n\t\t\t\tthis.set_country_code_value(country_code)\n\t\t\t}\n\t\t}\n\t\t// If \"International\" mode is selected\n\t\t// and the `value` doesn't start with a + sign,\n\t\t// then prepend it to the `value`.\n\t\telse if (!country_code)\n\t\t{\n\t\t\tvalue = '+' + value\n\t\t}\n\n\t\t// Convert `value` to E.164 phone number format\n\t\t// and write it to `this.props.value`.\n\t\tonChange(e164(value, country_code, metadata))\n\n\t\t// Update the `value`\n\t\tthis.setState({ value })\n\t}\n\n\t// When country `<select/>` is toggled\n\tcountry_select_toggled = (is_shown) =>\n\t{\n\t\tif(this.props.showAllCountriesOnFocus && is_shown){\n\t\t\tthis.setState({ country_code: '' });\n\t\t}\n\n\t\tthis.setState({ country_select_is_shown: is_shown })\n\t}\n\n\t// Focuses the `<input/>` field\n\t// on tab out of the country `<select/>`\n\ton_country_select_tab_out = (event) =>\n\t{\n\t\tevent.preventDefault()\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\tsetTimeout(this.focus, 0)\n\t}\n\n\t// Can a user change the default country or not.\n\tcan_change_country()\n\t{\n\t\tconst { countries } = this.props\n\n\t\t// If `countries` is empty,\n\t\t// then only \"International\" option is available,\n\t\t// so can't switch it.\n\t\t//\n\t\t// If `countries` is a single allowed country,\n\t\t// then cant's switch it.\n\t\t//\n\t\treturn countries.length > 1\n\t}\n\n\t// Listen for default country property:\n\t// if it is set after the page loads\n\t// and the user hasn't selected a country yet\n\t// then select the default country.\n\tcomponentWillReceiveProps(new_props)\n\t{\n\t\tconst { countries, country, value } = this.props\n\n\t\t// If the default country changed\n\t\t// (e.g. in case of IP detection)\n\t\tif (new_props.country !== country)\n\t\t{\n\t\t\t// If the phone number input field is currently empty\n\t\t\t// (e.g. not touched yet) then change the selected `country`\n\t\t\t// to the newly passed one (e.g. as a result of a GeoIP query)\n\t\t\tif (!value)\n\t\t\t{\n\t\t\t\t// If the passed `country` allowed then update it\n\t\t\t\tif (countries.indexOf(new_props.country) !== -1)\n\t\t\t\t{\n\t\t\t\t\t// Set the new `country`\n\t\t\t\t\tthis.set_country(new_props.country, false)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tdictionary,\n\t\t\tsaveOnIcons,\n\t\t\tshowCountrySelect,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tonCountryChange,\n\t\t\tflags,\n\t\t\tflagsPath,\n\t\t\tconvertToNational,\n\t\t\tnativeExpanded,\n\t\t\tdisabled,\n\t\t\tselectTabIndex,\n\t\t\tinputTabIndex,\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\tmetadata,\n\t\t\t...input_props\n\t\t}\n\t\t= this.props\n\n\t\tconst { country_select_is_shown } = this.state\n\n\t\tconst markup =\n\t\t(\n\t\t\t<div style={ style } className={ classNames('react-phone-number-input', className) }>\n\t\t\t\t{ showCountrySelect && this.can_change_country() &&\n\t\t\t\t\t<Select\n\t\t\t\t\t\tref={ ref => this.select = ref }\n\t\t\t\t\t\tvalue={ this.state.country_code }\n\t\t\t\t\t\toptions={ this.select_options }\n\t\t\t\t\t\tonChange={ this.set_country }\n\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\tonToggle={ this.country_select_toggled }\n\t\t\t\t\t\tonTabOut={ this.on_country_select_tab_out }\n\t\t\t\t\t\tnativeExpanded={ nativeExpanded }\n\t\t\t\t\t\tautocomplete\n\t\t\t\t\t\tautocompleteShowAll\n\t\t\t\t\t\tconcise\n\t\t\t\t\t\ttabIndex={ selectTabIndex }\n\t\t\t\t\t\tfocusUponSelection={ false }\n\t\t\t\t\t\tsaveOnIcons={ saveOnIcons }\n\t\t\t\t\t\tname={ input_props.name ? `${input_props.name}__country` : undefined }\n\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"\n\t\t\t\t\t\tstyle={ select_style }/>\n\t\t\t\t}\n\n\t\t\t\t{ !country_select_is_shown &&\n\t\t\t\t\t<ReactInput\n\t\t\t\t\t\t{ ...input_props }\n\t\t\t\t\t\tref={ ref => this.input = ref }\n\t\t\t\t\t\tvalue={ this.state.value }\n\t\t\t\t\t\tonChange={ this.on_change }\n\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\ttabIndex={ inputTabIndex }\n\t\t\t\t\t\tparse={ this.parse }\n\t\t\t\t\t\tformat={ this.format }\n\t\t\t\t\t\tonKeyDown={ this.on_key_down }\n\t\t\t\t\t\tclassName={ classNames('rrui__input', 'react-phone-number-input__phone') }\n\t\t\t\t\t\tstyle={ input_style }/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\n\t\treturn markup\n\t}\n}\n\n// Parses a partially entered phone number\n// and returns the national number so far.\n// Not using `libphonenumber-js`'s `parse`\n// function here because `parse` only works\n// when the number is fully entered,\n// and this one is for partially entered number.\nfunction parse_partial_number(value, country_code, metadata)\n{\n\t// \"As you type\" formatter\n\tconst formatter = new as_you_type(country_code, metadata)\n\n\t// Input partially entered phone number\n\tformatter.input(value)\n\n\t// Return the parsed partial phone number\n\t// (has `.national_number`, `.country`, etc)\n\treturn formatter\n}\n\n// Converts `value` to E.164 phone number format\nfunction e164(value, country_code, metadata)\n{\n\t// If the phone number is being input in a country-specific format\n\t//   If the value has a leading + sign\n\t//     The value stays as it is\n\t//   Else\n\t//     The value is converted to international plaintext\n\t// Else, the phone number is being input in an international format\n\t//   If the value has a leading + sign\n\t//     The value stays as it is\n\t//   Else\n\t//     The value is prepended with a + sign\n\n\tif (country_code)\n\t{\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\treturn value\n\t\t}\n\n\t\tconst partial_national_number = parse_partial_number(value, country_code).national_number\n\t\treturn format(partial_national_number, country_code, 'International_plaintext', metadata)\n\t}\n\n\tif (value[0] === '+')\n\t{\n\t\treturn value\n\t}\n\n\treturn '+' + value\n}\n\nconst select_style =\n{\n\tdisplay       : 'inline-block',\n\tverticalAlign : 'bottom'\n}\n\nconst input_style = select_style\n\n// Gets country flag element by country code\nfunction get_country_option_icon(country_code, { flags, flagsPath })\n{\n\tif (flags === false)\n\t{\n\t\treturn undefined\n\t}\n\n\tif (flags && flags[country_code])\n\t{\n\t\treturn flags[country_code]\n\t}\n\n\treturn <img\n\t\tclassName=\"react-phone-number-input__icon\"\n\t\tsrc={`${flagsPath}${country_code.toLowerCase()}.svg`}/>\n}\n\n// Whether to add the \"International\" option to the list of countries\nfunction should_add_international_option(properties)\n{\n\tconst { countries, international } = properties\n\n\t// If this behaviour is explicitly set, then do as it says.\n\tif (international !== undefined)\n\t{\n\t\treturn international\n\t}\n\n\t// If `countries` is empty,\n\t// then only \"International\" option is available, so add it.\n\tif (countries.length === 0)\n\t{\n\t\treturn true\n\t}\n\n\t// If `countries` is a single allowed country,\n\t// then don't add the \"International\" option\n\t// because it would make no sense.\n\tif (countries.length === 1)\n\t{\n\t\treturn false\n\t}\n\n\t// Show the \"International\" option by default\n\treturn true\n}\n\n// Gets a text from dictionary\nfunction from_dictionary(key, properties)\n{\n\tconst { dictionary } = properties\n\n\treturn dictionary[key] || default_dictionary[key]\n}\n\n// Is it possible that the partially entered  phone number belongs to the given country\nfunction could_phone_number_belong_to_country(phone_number, country_code, metadata)\n{\n\t// Strip the leading `+`\n\tconst phone_number_digits = phone_number.slice(1)\n\n\tfor (const country_phone_code of Object.keys(metadata.country_phone_code_to_countries))\n\t{\n\t\tconst possible_country_phone_code = phone_number_digits.substring(0, country_phone_code.length)\n\t\tif (country_phone_code.indexOf(possible_country_phone_code) === 0)\n\t\t{\n\t\t\t// This country phone code is possible.\n\t\t\t// Does the given country correspond to this country phone code.\n\t\t\tif (metadata.country_phone_code_to_countries[country_phone_code].indexOf(country_code) >= 0)\n\t\t\t{\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n}\n"]}